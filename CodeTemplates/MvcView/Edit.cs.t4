<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
#>
@model <#= ViewDataTypeName #>
@{
	Layout = null;
}

<div class="modal" id="modal" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			@{string ajaxPostUrl = Url.Action("<#=ViewName#>", null, null, Request.Url.Scheme);}
			@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "form", ajaxPostUrl = ajaxPostUrl }))
			{
				@Html.AntiForgeryToken()
				<div class="modal-header">
					<div class="col-md-10">
					<h3><#= ViewName #> - 
<# 
foreach (PropertyMetadata property in ModelMetadata.Properties) {
	if (property.Scaffold && !property.IsAssociation) {
		if (property.IsPrimaryKey) {
#>
<span class="text-warning pull-right">(PK) @Model.<#=property.PropertyName#></span>
<#
		}
	}
}
#>					</h3>				
					</div>
					<div class="col-md-2">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
				</div>
				<div class="modal-body">
<# 
    if (isControlHtmlAttributesSupported) {
#>
					@Html.ValidationSummary(true, "", new { @class = "text-danger" })
<#        
    } else {
#>
					@Html.ValidationSummary(true)
<#      
    }
#>

					<table class="table table-striped table-hover table-bordered">
						<thead class="thead-dark">
							<tr>
								<th scope="col">DisplayNameFor</th>
								<th scope="col">DisplayFor</th>
							</tr>
						</thead>
						<tbody>
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAssociation) {
        if (property.IsPrimaryKey) {
#>
							@Html.HiddenFor(model => model.<#= property.PropertyName #>)
<#
        } else if (!property.IsReadOnly) {
#>
							<tr>
								<td>
<#
            if (property.IsForeignKey) {
#>
									@Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-2" })
<#
            } else {
#>
									@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
            }
#>
								</td>
								<td>
<#
            bool isCheckbox = property.TypeName.Equals(boolType);
            if (property.IsForeignKey) {
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
									@Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
									@Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
            }
#>
<#
            } else  if (isControlHtmlAttributesSupported) {
                if (isCheckbox) {
#>
<#
                    PushIndent("    ");
#>
								@Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
                } else if (property.IsEnum && !property.IsEnumFlags) {
#>
									@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
                } else {
#>
									@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
                }
            } else {
#>
									@Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            }
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
									@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
            } else {
#>
									@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
            }
#>
<#
            if (isCheckbox && isControlHtmlAttributesSupported) {
                PopIndent();
#>
<#
            }
#>
								</td>
							</tr>
<#
        }
    }
}
#>						</tbody>
					</table>				
				</div>
				<div class="modal-footer">
                    <button type="button" class="btn btn-success" onclick="formValidSend()">Save</button>
                    <button type="button" class="btn btn-primary pull-right" data-dismiss="modal">Close</button>
				</div>
			}
		</div>
	</div>
</div>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>