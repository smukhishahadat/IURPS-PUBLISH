<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model IEnumerable<#= "<" + ViewDataTypeName + ">" #>
<# string dtType = "System.Boolean"; #>
@{
	ViewBag.Title = "<#= ViewName#>";
<# if (!String.IsNullOrEmpty(LayoutPageFile)) { #>
	Layout = "<#= LayoutPageFile#>";
<#}else{#>
	Layout = null;
<#}#>
}

<# string pkName = GetPrimaryKeyName(); #>

@{
    string Create = Url.Action("Create", null, null, Request.Url.Scheme);
    string Details = Url.Action("Details", null, null, Request.Url.Scheme);
    string Edit = Url.Action("Edit", null, null, Request.Url.Scheme);
    string Delete = Url.Action("Delete", null, null, Request.Url.Scheme);
}

<div class='row'>
	<div class='col-md-10 text-left'>
		<h3 class='text-info'>@HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString()</h3>
	</div>
    <div class='col-md-2 text-right'>
        <button class='btn btn-success btn-madd' onclick='btnAddClick($(this))' myUrl='@Create'><i class='fa fa-plus-circle'></i> Add</button>
    </div>
</div>

@if (@Model != null)
{
    @(Html
        .Grid(Model)
        .Build(columns =>
        {
columns.Add(model => $@"<button class='btn btn-primary btn-mdetails' value='{model.<#= pkName #>}' onclick='btnDetailsClick($(this));' myUrl='{Details}'><i class='fa fa-info'></i> Details</button>
						<button class='btn btn-warning btn-medit'    value='{model.<#= pkName #>}' onclick='btnEditClick($(this))' myUrl='{Edit}'><i class='fa fa-pencil'></i> Edit</button>
						<button class='btn btn-danger  btn-mdelete'  value='{model.<#= pkName #>}' onclick='btnDeleteClick($(this))' myUrl='{Delete}'><i class='fa fa-times-circle'></i></button>").Encoded(false).Css("management-col").Titled("MANAGEMENT");
			<#
				foreach (PropertyMetadata property in ModelMetadata.Properties)
                {
					if (property.Scaffold)
                    {
						// We do not want to show any association properties for which there is
						// no associated foreign key.
						if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
							continue;
						}
                        if (property.TypeName.Equals(dtType))
                        {
						#>
columns.Add(model => string.Format("{0:yyyy-MM-dd HH:mm}", model.<#= GetValueExpression(property) #>)).Titled("<#= GetValueExpression(property) #>");
						<#
                        }
						else
						{
						#>
columns.Add(model => model.<#= GetValueExpression(property) #>).Titled("<#= GetValueExpression(property) #>");
						<#
						}
					}
				}
			#>

        })
        .WithFilterMode(GridFilterMode.FilterRow)
        .Empty("No data found")
        .MultiFilterable()
        .Filterable()
        .Sortable()
    )
}

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/_global.js"></script>
    <script src="~/Scripts/MvcGrid/mvc-grid.js"></script>
    <link href="~/Content/MvcGrid/mvc-grid.css" rel="stylesheet" />
    <link href="~/Content/font-awesome.css" rel="stylesheet" />
    <link href="~/Content/_global.css" rel="stylesheet" />
}

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>